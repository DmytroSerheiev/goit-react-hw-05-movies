{"version":3,"file":"static/js/247.0b9ddd24.chunk.js","mappings":"8LAqCA,UAjCa,WACX,OAAwBA,EAAAA,EAAAA,UAAS,IAAG,eAA7BC,EAAI,KAAEC,EAAO,KACZC,GAAYC,EAAAA,EAAAA,MAAZD,SAERE,EAAAA,EAAAA,YAAU,WAIR,OAHIF,IACFG,EAAAA,EAAAA,IAAiBH,GAASI,MAAK,SAAAC,GAAI,OAAIN,EAAQM,EAAKP,KAAK,IAEpD,WAAO,CAEhB,GAAG,IAKH,OACE,0BACE,wBACGA,EAAKQ,KAAI,gBAAGC,EAAY,EAAZA,aAAcC,EAAI,EAAJA,KAAMC,EAAE,EAAFA,GAAE,OACjC,2BACE,gBACEC,IAAKH,GAAY,UATZ,+BAS2B,OAR/B,QAQsC,OAAGA,GAC1CI,IAAKH,EACLI,QAAQ,UAEV,uBAAIJ,MANGC,EAOJ,OAKf,C,qLCjCAI,EAAAA,EAAAA,SAAAA,QAAyB,8BACzB,IAAMC,EAAU,mCAEHC,EAAiB,yCAAG,yGAEkD,OAF3CC,EAAI,+BAAG,EAAC,SAEtCC,EAAG,uCAAmCH,EAAO,gCAAwBE,GAAI,SAExDH,EAAAA,EAAAA,IAAUI,GAAK,KAAD,EAAvB,OAARC,EAAQ,yBAEPA,EAASb,MAAI,gCAEpBc,QAAQC,IAAI,EAAD,IAAQ,yDAEtB,kBAV6B,mCAWjBC,EAAe,yCAAG,WAAOC,GAAW,4FAEiD,OAF/CN,EAAI,+BAAG,EAAC,SAEjDC,EAAG,iCAA6BH,EAAO,iCAAyBQ,EAAW,iBAASN,EAAI,iCAEvEH,EAAAA,EAAAA,IAAUI,GAAK,KAAD,EAAvB,OAARC,EAAQ,yBAEPA,EAASb,MAAI,gCAEpBc,QAAQC,IAAI,EAAD,IAAQ,yDAEtB,gBAV2B,sCAWfG,EAAa,yCAAG,WAAMC,GAAO,8EAEW,OAFX,SAEhCP,EAAG,kBAAcO,EAAO,oBAAYV,EAAO,4BAE1BD,EAAAA,EAAAA,IAAUI,GAAK,KAAD,EAAvB,OAARC,EAAQ,yBAEPA,EAASb,MAAI,gCAEpBc,QAAQC,IAAI,EAAD,IAAQ,yDAEtB,gBAVyB,sCAYbjB,EAAgB,yCAAG,WAAMqB,GAAO,8EAEgB,OAFhB,SAEnCP,EAAG,kBAAcO,EAAO,4BAAoBV,EAAO,4BAElCD,EAAAA,EAAAA,IAAUI,GAAK,KAAD,EAAvB,OAARC,EAAQ,yBAEPA,EAASb,MAAI,gCAEpBc,QAAQC,IAAI,EAAD,IAAQ,yDAEtB,gBAV4B,sCAYhBK,EAAmB,yCAAG,WAAMD,GAAO,8EAEa,OAFb,SAEtCP,EAAG,kBAAcO,EAAO,4BAAoBV,EAAO,4BAElCD,EAAAA,EAAAA,IAAUI,GAAK,KAAD,EAAvB,OAARC,EAAQ,yBAEPA,EAASb,MAAI,gCAEpBc,QAAQC,IAAI,EAAD,IAAQ,yDAEtB,gBAV+B,qC","sources":["components/Cast/Cast.jsx","service/Api.js"],"sourcesContent":["import { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { getMovieCastByID } from 'service/Api';\n\nconst Cast = () => {\n  const [cast, setCast] = useState([]);\n  const { movieId } = useParams();\n\n  useEffect(() => {\n    if (movieId) {\n      getMovieCastByID(movieId).then(data => setCast(data.cast));\n    }\n    return () => {};\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  const base_url = 'https://image.tmdb.org/t/p/';\n  const size = 'w200';\n\n  return (\n    <div>\n      <ul>\n        {cast.map(({ profile_path, name, id }) => (\n          <li key={id}>\n            <img\n              src={profile_path && `${base_url}${size}${profile_path}`}\n              alt={name}\n              loading=\"lazy\"\n            />\n            <p>{name}</p>\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n\nexport default Cast;\n","import axios from 'axios';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/';\nconst userKey = '6fe1e9d5fbaeb01db6cc1b91ad7172fe';\n\nexport const getTrendingMovies = async (page = 1) => {\n  try {\n    const url = `3/trending/movie/day?api_key=${userKey}&language=ru-US&page=${page}`;\n\n    const response = await axios.get(url);\n\n    return response.data;\n  } catch (error) {\n    console.log(error);\n  }\n};\nexport const getSearchMovies = async (searchQuery, page = 1) => {\n  try {\n    const url = `3/search/movie?api_key=${userKey}&language=ru-US&query=${searchQuery}&page=${page}&include_adult=false`;\n\n    const response = await axios.get(url);\n\n    return response.data;\n  } catch (error) {\n    console.log(error);\n  }\n};\nexport const getMoviesByID = async movieID => {\n  try {\n    const url = `3/movie/${movieID}?api_key=${userKey}&language=ru-US`;\n\n    const response = await axios.get(url);\n\n    return response.data;\n  } catch (error) {\n    console.log(error);\n  }\n};\n\nexport const getMovieCastByID = async movieID => {\n  try {\n    const url = `3/movie/${movieID}/credits?api_key=${userKey}&language=ru-US`;\n\n    const response = await axios.get(url);\n\n    return response.data;\n  } catch (error) {\n    console.log(error);\n  }\n};\n\nexport const getMovieReviewsByID = async movieID => {\n  try {\n    const url = `3/movie/${movieID}/reviews?api_key=${userKey}&language=ru-US`;\n\n    const response = await axios.get(url);\n\n    return response.data;\n  } catch (error) {\n    console.log(error);\n  }\n};\n"],"names":["useState","cast","setCast","movieId","useParams","useEffect","getMovieCastByID","then","data","map","profile_path","name","id","src","alt","loading","axios","userKey","getTrendingMovies","page","url","response","console","log","getSearchMovies","searchQuery","getMoviesByID","movieID","getMovieReviewsByID"],"sourceRoot":""}